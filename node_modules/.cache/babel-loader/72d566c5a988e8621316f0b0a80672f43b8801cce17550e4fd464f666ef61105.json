{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\nconst ece = require('http_ece');\nconst encrypt = function (userPublicKey, userAuth, payload, contentEncoding) {\n  if (!userPublicKey) {\n    throw new Error('No user public key provided for encryption.');\n  }\n  if (typeof userPublicKey !== 'string') {\n    throw new Error('The subscription p256dh value must be a string.');\n  }\n  if (Buffer.from(userPublicKey, 'base64url').length !== 65) {\n    throw new Error('The subscription p256dh value should be 65 bytes long.');\n  }\n  if (!userAuth) {\n    throw new Error('No user auth provided for encryption.');\n  }\n  if (typeof userAuth !== 'string') {\n    throw new Error('The subscription auth key must be a string.');\n  }\n  if (Buffer.from(userAuth, 'base64url').length < 16) {\n    throw new Error('The subscription auth key should be at least 16 ' + 'bytes long');\n  }\n  if (typeof payload !== 'string' && !Buffer.isBuffer(payload)) {\n    throw new Error('Payload must be either a string or a Node Buffer.');\n  }\n  if (typeof payload === 'string' || payload instanceof String) {\n    payload = Buffer.from(payload);\n  }\n  const localCurve = crypto.createECDH('prime256v1');\n  const localPublicKey = localCurve.generateKeys();\n  const salt = crypto.randomBytes(16).toString('base64url');\n  const cipherText = ece.encrypt(payload, {\n    version: contentEncoding,\n    dh: userPublicKey,\n    privateKey: localCurve,\n    salt: salt,\n    authSecret: userAuth\n  });\n  return {\n    localPublicKey: localPublicKey,\n    salt: salt,\n    cipherText: cipherText\n  };\n};\nmodule.exports = {\n  encrypt: encrypt\n};","map":{"version":3,"names":["crypto","require","ece","encrypt","userPublicKey","userAuth","payload","contentEncoding","Error","Buffer","from","length","isBuffer","String","localCurve","createECDH","localPublicKey","generateKeys","salt","randomBytes","toString","cipherText","version","dh","privateKey","authSecret","module","exports"],"sources":["/var/www/html/react-chat-app/firebase-chat-app/node_modules/web-push/src/encryption-helper.js"],"sourcesContent":["'use strict';\n\nconst crypto = require('crypto');\nconst ece = require('http_ece');\n\nconst encrypt = function(userPublicKey, userAuth, payload, contentEncoding) {\n  if (!userPublicKey) {\n    throw new Error('No user public key provided for encryption.');\n  }\n\n  if (typeof userPublicKey !== 'string') {\n    throw new Error('The subscription p256dh value must be a string.');\n  }\n\n  if (Buffer.from(userPublicKey, 'base64url').length !== 65) {\n    throw new Error('The subscription p256dh value should be 65 bytes long.');\n  }\n\n  if (!userAuth) {\n    throw new Error('No user auth provided for encryption.');\n  }\n\n  if (typeof userAuth !== 'string') {\n    throw new Error('The subscription auth key must be a string.');\n  }\n\n  if (Buffer.from(userAuth, 'base64url').length < 16) {\n    throw new Error('The subscription auth key should be at least 16 '\n    + 'bytes long');\n  }\n\n  if (typeof payload !== 'string' && !Buffer.isBuffer(payload)) {\n    throw new Error('Payload must be either a string or a Node Buffer.');\n  }\n\n  if (typeof payload === 'string' || payload instanceof String) {\n    payload = Buffer.from(payload);\n  }\n\n  const localCurve = crypto.createECDH('prime256v1');\n  const localPublicKey = localCurve.generateKeys();\n\n  const salt = crypto.randomBytes(16).toString('base64url');\n\n  const cipherText = ece.encrypt(payload, {\n    version: contentEncoding,\n    dh: userPublicKey,\n    privateKey: localCurve,\n    salt: salt,\n    authSecret: userAuth\n  });\n\n  return {\n    localPublicKey: localPublicKey,\n    salt: salt,\n    cipherText: cipherText\n  };\n};\n\nmodule.exports = {\n  encrypt: encrypt\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,GAAG,GAAGD,OAAO,CAAC,UAAU,CAAC;AAE/B,MAAME,OAAO,GAAG,SAAAA,CAASC,aAAa,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,eAAe,EAAE;EAC1E,IAAI,CAACH,aAAa,EAAE;IAClB,MAAM,IAAII,KAAK,CAAC,6CAA6C,CAAC;EAChE;EAEA,IAAI,OAAOJ,aAAa,KAAK,QAAQ,EAAE;IACrC,MAAM,IAAII,KAAK,CAAC,iDAAiD,CAAC;EACpE;EAEA,IAAIC,MAAM,CAACC,IAAI,CAACN,aAAa,EAAE,WAAW,CAAC,CAACO,MAAM,KAAK,EAAE,EAAE;IACzD,MAAM,IAAIH,KAAK,CAAC,wDAAwD,CAAC;EAC3E;EAEA,IAAI,CAACH,QAAQ,EAAE;IACb,MAAM,IAAIG,KAAK,CAAC,uCAAuC,CAAC;EAC1D;EAEA,IAAI,OAAOH,QAAQ,KAAK,QAAQ,EAAE;IAChC,MAAM,IAAIG,KAAK,CAAC,6CAA6C,CAAC;EAChE;EAEA,IAAIC,MAAM,CAACC,IAAI,CAACL,QAAQ,EAAE,WAAW,CAAC,CAACM,MAAM,GAAG,EAAE,EAAE;IAClD,MAAM,IAAIH,KAAK,CAAC,kDAAkD,GAChE,YAAY,CAAC;EACjB;EAEA,IAAI,OAAOF,OAAO,KAAK,QAAQ,IAAI,CAACG,MAAM,CAACG,QAAQ,CAACN,OAAO,CAAC,EAAE;IAC5D,MAAM,IAAIE,KAAK,CAAC,mDAAmD,CAAC;EACtE;EAEA,IAAI,OAAOF,OAAO,KAAK,QAAQ,IAAIA,OAAO,YAAYO,MAAM,EAAE;IAC5DP,OAAO,GAAGG,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC;EAChC;EAEA,MAAMQ,UAAU,GAAGd,MAAM,CAACe,UAAU,CAAC,YAAY,CAAC;EAClD,MAAMC,cAAc,GAAGF,UAAU,CAACG,YAAY,CAAC,CAAC;EAEhD,MAAMC,IAAI,GAAGlB,MAAM,CAACmB,WAAW,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,WAAW,CAAC;EAEzD,MAAMC,UAAU,GAAGnB,GAAG,CAACC,OAAO,CAACG,OAAO,EAAE;IACtCgB,OAAO,EAAEf,eAAe;IACxBgB,EAAE,EAAEnB,aAAa;IACjBoB,UAAU,EAAEV,UAAU;IACtBI,IAAI,EAAEA,IAAI;IACVO,UAAU,EAAEpB;EACd,CAAC,CAAC;EAEF,OAAO;IACLW,cAAc,EAAEA,cAAc;IAC9BE,IAAI,EAAEA,IAAI;IACVG,UAAU,EAAEA;EACd,CAAC;AACH,CAAC;AAEDK,MAAM,CAACC,OAAO,GAAG;EACfxB,OAAO,EAAEA;AACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}