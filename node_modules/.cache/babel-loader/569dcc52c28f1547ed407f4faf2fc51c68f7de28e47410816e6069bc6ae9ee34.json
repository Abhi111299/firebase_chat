{"ast":null,"code":"var _jsxFileName = \"/var/www/html/react-chat-app/firebase-chat-app/src/pages/Register.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\n// Import getToken from Firebase Messaging\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Import your Firebase messaging instance\n\nconst Register = () => {\n  _s();\n  const navigate = useNavigate();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  useEffect(() => {\n    // Request notification permission when the component mounts\n    const requestNotificationPermission = async () => {\n      try {\n        const permission = await Notification.requestPermission();\n        if (permission !== 'granted') {\n          setError('Notification permission is required for registration.');\n        }\n      } catch (error) {\n        console.error('Error requesting notification permission:', error);\n        setError('Failed to request notification permission.');\n      }\n    };\n    requestNotificationPermission();\n  }, []);\n\n  // Get the FCM Token\n  // const getFCMToken = async () => {\n  //   try {\n  //     const token = await getToken(messaging, {\n  //       vapidKey: 'BFD2u_zBUQGOkcAGHujWEwvZ_4Z2ooOX7qAlijVA9H755geE0MY645XZvf5SALjVOkWWAz30awa8XdW4S_cjjWM-ceYgmm3s6dgeFfclBDCqSC0hQgdZCsjkcnPXEYnvVE', // Replace with your VAPID key\n  //     });\n  //     if (!token) {\n  //       console.error('FCM Token is null or undefined');\n  //       return null;\n  //     }\n  //     console.log('FCM Token:', token);\n  //     return token;\n  //   } catch (error) {\n  //     console.error('Error getting FCM token:', error);\n  //     return null;\n  //   }\n  // };\n\n  const handleRegister = async e => {\n    e.preventDefault();\n    // const fcmToken = await getFCMToken();  // Get FCM token before sending the request\n\n    // if (!fcmToken) {\n    //   setError('FCM Token is required for registration');\n    //   return;\n    // }\n\n    try {\n      // Send the registration request to the backend API with FCM token\n      const response = await axios.post('http://localhost:4000/register', {\n        email,\n        password\n        // fcmToken,  // Send the fcmToken\n      });\n      console.log(response);\n\n      // Assuming the backend returns a success message, redirect to chat\n      if (response.status === 201) {\n        navigate('/chat'); // Redirect to chat page after successful registration\n      }\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response2, _error$response2$data;\n      console.log(\"network error========>\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message);\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message); // Set error if registration fails\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleRegister,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Email\",\n        value: email,\n        onChange: e => setEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(Register, \"+uI/IyVckqS9r8YiG7GOOkL3Ilo=\", false, function () {\n  return [useNavigate];\n});\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","jsxDEV","_jsxDEV","Register","_s","navigate","email","setEmail","password","setPassword","error","setError","requestNotificationPermission","permission","Notification","requestPermission","console","handleRegister","e","preventDefault","response","post","log","status","_error$response","_error$response$data","_error$response2","_error$response2$data","data","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["/var/www/html/react-chat-app/firebase-chat-app/src/pages/Register.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { getToken } from 'firebase/messaging';  // Import getToken from Firebase Messaging\nimport { messaging } from '../firebaseConfig';  // Import your Firebase messaging instance\n\nconst Register = () => {\n  const navigate = useNavigate();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    // Request notification permission when the component mounts\n    const requestNotificationPermission = async () => {\n      try {\n        const permission = await Notification.requestPermission();\n        if (permission !== 'granted') {\n          setError('Notification permission is required for registration.');\n        }\n      } catch (error) {\n        console.error('Error requesting notification permission:', error);\n        setError('Failed to request notification permission.');\n      }\n    };\n\n    requestNotificationPermission();\n  }, []);\n\n  // Get the FCM Token\n  // const getFCMToken = async () => {\n  //   try {\n  //     const token = await getToken(messaging, {\n  //       vapidKey: 'BFD2u_zBUQGOkcAGHujWEwvZ_4Z2ooOX7qAlijVA9H755geE0MY645XZvf5SALjVOkWWAz30awa8XdW4S_cjjWM-ceYgmm3s6dgeFfclBDCqSC0hQgdZCsjkcnPXEYnvVE', // Replace with your VAPID key\n  //     });\n  //     if (!token) {\n  //       console.error('FCM Token is null or undefined');\n  //       return null;\n  //     }\n  //     console.log('FCM Token:', token);\n  //     return token;\n  //   } catch (error) {\n  //     console.error('Error getting FCM token:', error);\n  //     return null;\n  //   }\n  // };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    // const fcmToken = await getFCMToken();  // Get FCM token before sending the request\n\n    // if (!fcmToken) {\n    //   setError('FCM Token is required for registration');\n    //   return;\n    // }\n\n    try {\n      // Send the registration request to the backend API with FCM token\n      const response = await axios.post('http://localhost:4000/register', {\n        email,\n        password,\n        // fcmToken,  // Send the fcmToken\n      });\n      console.log(response);\n\n      // Assuming the backend returns a success message, redirect to chat\n      if (response.status === 201) {\n        navigate('/chat');  // Redirect to chat page after successful registration\n      }\n    } catch (error: any) {\n      console.log(\"network error========>\", error.response?.data?.message || error.message);\n      setError(error.response?.data?.message || error.message);  // Set error if registration fails\n    }\n  };\n\n  return (\n    <div className=\"form-container\">\n      <h2>Register</h2>\n      <form onSubmit={handleRegister}>\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        {error && <div>{error}</div>}  {/* Display error message if there's one */}\n        <button type=\"submit\">Register</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Register;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}